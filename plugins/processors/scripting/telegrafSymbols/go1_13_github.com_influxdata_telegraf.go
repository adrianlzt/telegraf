// Code generated by 'goexports github.com/influxdata/telegraf'. DO NOT EDIT.

// +build go1.13,!go1.14

package telegrafSymbols

import (
	"reflect"
	"time"

	"github.com/influxdata/telegraf"
)

var Symbols = map[string]map[string]reflect.Value{}

func init() {
	Symbols["github.com/influxdata/telegraf"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Counter":   reflect.ValueOf(telegraf.Counter),
		"Gauge":     reflect.ValueOf(telegraf.Gauge),
		"Histogram": reflect.ValueOf(telegraf.Histogram),
		"Summary":   reflect.ValueOf(telegraf.Summary),
		"Untyped":   reflect.ValueOf(telegraf.Untyped),

		// type definitions
		"Accumulator":         reflect.ValueOf((*telegraf.Accumulator)(nil)),
		"AggregatingOutput":   reflect.ValueOf((*telegraf.AggregatingOutput)(nil)),
		"Aggregator":          reflect.ValueOf((*telegraf.Aggregator)(nil)),
		"DeliveryInfo":        reflect.ValueOf((*telegraf.DeliveryInfo)(nil)),
		"Field":               reflect.ValueOf((*telegraf.Field)(nil)),
		"Initializer":         reflect.ValueOf((*telegraf.Initializer)(nil)),
		"Input":               reflect.ValueOf((*telegraf.Input)(nil)),
		"Logger":              reflect.ValueOf((*telegraf.Logger)(nil)),
		"Metric":              reflect.ValueOf((*telegraf.Metric)(nil)),
		"Output":              reflect.ValueOf((*telegraf.Output)(nil)),
		"Processor":           reflect.ValueOf((*telegraf.Processor)(nil)),
		"ServiceInput":        reflect.ValueOf((*telegraf.ServiceInput)(nil)),
		"Tag":                 reflect.ValueOf((*telegraf.Tag)(nil)),
		"TrackingAccumulator": reflect.ValueOf((*telegraf.TrackingAccumulator)(nil)),
		"TrackingID":          reflect.ValueOf((*telegraf.TrackingID)(nil)),
		"ValueType":           reflect.ValueOf((*telegraf.ValueType)(nil)),

		// interface wrapper definitions
		"_Accumulator":         reflect.ValueOf((*_github_com_influxdata_telegraf_Accumulator)(nil)),
		"_AggregatingOutput":   reflect.ValueOf((*_github_com_influxdata_telegraf_AggregatingOutput)(nil)),
		"_Aggregator":          reflect.ValueOf((*_github_com_influxdata_telegraf_Aggregator)(nil)),
		"_DeliveryInfo":        reflect.ValueOf((*_github_com_influxdata_telegraf_DeliveryInfo)(nil)),
		"_Initializer":         reflect.ValueOf((*_github_com_influxdata_telegraf_Initializer)(nil)),
		"_Input":               reflect.ValueOf((*_github_com_influxdata_telegraf_Input)(nil)),
		"_Logger":              reflect.ValueOf((*_github_com_influxdata_telegraf_Logger)(nil)),
		"_Metric":              reflect.ValueOf((*_github_com_influxdata_telegraf_Metric)(nil)),
		"_Output":              reflect.ValueOf((*_github_com_influxdata_telegraf_Output)(nil)),
		"_Processor":           reflect.ValueOf((*_github_com_influxdata_telegraf_Processor)(nil)),
		"_ServiceInput":        reflect.ValueOf((*_github_com_influxdata_telegraf_ServiceInput)(nil)),
		"_TrackingAccumulator": reflect.ValueOf((*_github_com_influxdata_telegraf_TrackingAccumulator)(nil)),
	}
}

// _github_com_influxdata_telegraf_Accumulator is an interface wrapper for Accumulator type
type _github_com_influxdata_telegraf_Accumulator struct {
	WAddCounter   func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddError     func(err error)
	WAddFields    func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddGauge     func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddHistogram func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddMetric    func(a0 telegraf.Metric)
	WAddSummary   func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WSetPrecision func(precision time.Duration)
	WWithTracking func(maxTracked int) telegraf.TrackingAccumulator
}

func (W _github_com_influxdata_telegraf_Accumulator) AddCounter(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddCounter(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_Accumulator) AddError(err error) { W.WAddError(err) }
func (W _github_com_influxdata_telegraf_Accumulator) AddFields(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddFields(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_Accumulator) AddGauge(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddGauge(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_Accumulator) AddHistogram(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddHistogram(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_Accumulator) AddMetric(a0 telegraf.Metric) { W.WAddMetric(a0) }
func (W _github_com_influxdata_telegraf_Accumulator) AddSummary(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddSummary(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_Accumulator) SetPrecision(precision time.Duration) {
	W.WSetPrecision(precision)
}
func (W _github_com_influxdata_telegraf_Accumulator) WithTracking(maxTracked int) telegraf.TrackingAccumulator {
	return W.WWithTracking(maxTracked)
}

// _github_com_influxdata_telegraf_AggregatingOutput is an interface wrapper for AggregatingOutput type
type _github_com_influxdata_telegraf_AggregatingOutput struct {
	WAdd          func(in telegraf.Metric)
	WClose        func() error
	WConnect      func() error
	WDescription  func() string
	WPush         func() []telegraf.Metric
	WReset        func()
	WSampleConfig func() string
	WWrite        func(metrics []telegraf.Metric) error
}

func (W _github_com_influxdata_telegraf_AggregatingOutput) Add(in telegraf.Metric) { W.WAdd(in) }
func (W _github_com_influxdata_telegraf_AggregatingOutput) Close() error           { return W.WClose() }
func (W _github_com_influxdata_telegraf_AggregatingOutput) Connect() error         { return W.WConnect() }
func (W _github_com_influxdata_telegraf_AggregatingOutput) Description() string {
	return W.WDescription()
}
func (W _github_com_influxdata_telegraf_AggregatingOutput) Push() []telegraf.Metric {
	return W.WPush()
}
func (W _github_com_influxdata_telegraf_AggregatingOutput) Reset() { W.WReset() }
func (W _github_com_influxdata_telegraf_AggregatingOutput) SampleConfig() string {
	return W.WSampleConfig()
}
func (W _github_com_influxdata_telegraf_AggregatingOutput) Write(metrics []telegraf.Metric) error {
	return W.WWrite(metrics)
}

// _github_com_influxdata_telegraf_Aggregator is an interface wrapper for Aggregator type
type _github_com_influxdata_telegraf_Aggregator struct {
	WAdd          func(in telegraf.Metric)
	WDescription  func() string
	WPush         func(acc telegraf.Accumulator)
	WReset        func()
	WSampleConfig func() string
}

func (W _github_com_influxdata_telegraf_Aggregator) Add(in telegraf.Metric)        { W.WAdd(in) }
func (W _github_com_influxdata_telegraf_Aggregator) Description() string           { return W.WDescription() }
func (W _github_com_influxdata_telegraf_Aggregator) Push(acc telegraf.Accumulator) { W.WPush(acc) }
func (W _github_com_influxdata_telegraf_Aggregator) Reset()                        { W.WReset() }
func (W _github_com_influxdata_telegraf_Aggregator) SampleConfig() string          { return W.WSampleConfig() }

// _github_com_influxdata_telegraf_DeliveryInfo is an interface wrapper for DeliveryInfo type
type _github_com_influxdata_telegraf_DeliveryInfo struct {
	WDelivered func() bool
	WID        func() telegraf.TrackingID
}

func (W _github_com_influxdata_telegraf_DeliveryInfo) Delivered() bool         { return W.WDelivered() }
func (W _github_com_influxdata_telegraf_DeliveryInfo) ID() telegraf.TrackingID { return W.WID() }

// _github_com_influxdata_telegraf_Initializer is an interface wrapper for Initializer type
type _github_com_influxdata_telegraf_Initializer struct {
	WInit func() error
}

func (W _github_com_influxdata_telegraf_Initializer) Init() error { return W.WInit() }

// _github_com_influxdata_telegraf_Input is an interface wrapper for Input type
type _github_com_influxdata_telegraf_Input struct {
	WDescription  func() string
	WGather       func(a0 telegraf.Accumulator) error
	WSampleConfig func() string
}

func (W _github_com_influxdata_telegraf_Input) Description() string { return W.WDescription() }
func (W _github_com_influxdata_telegraf_Input) Gather(a0 telegraf.Accumulator) error {
	return W.WGather(a0)
}
func (W _github_com_influxdata_telegraf_Input) SampleConfig() string { return W.WSampleConfig() }

// _github_com_influxdata_telegraf_Logger is an interface wrapper for Logger type
type _github_com_influxdata_telegraf_Logger struct {
	WDebug  func(args []interface{})
	WDebugf func(format string, args []interface{})
	WError  func(args []interface{})
	WErrorf func(format string, args []interface{})
	WInfo   func(args []interface{})
	WInfof  func(format string, args []interface{})
	WWarn   func(args []interface{})
	WWarnf  func(format string, args []interface{})
}

func (W _github_com_influxdata_telegraf_Logger) Debug(args []interface{}) { W.WDebug(args) }
func (W _github_com_influxdata_telegraf_Logger) Debugf(format string, args []interface{}) {
	W.WDebugf(format, args)
}
func (W _github_com_influxdata_telegraf_Logger) Error(args []interface{}) { W.WError(args) }
func (W _github_com_influxdata_telegraf_Logger) Errorf(format string, args []interface{}) {
	W.WErrorf(format, args)
}
func (W _github_com_influxdata_telegraf_Logger) Info(args []interface{}) { W.WInfo(args) }
func (W _github_com_influxdata_telegraf_Logger) Infof(format string, args []interface{}) {
	W.WInfof(format, args)
}
func (W _github_com_influxdata_telegraf_Logger) Warn(args []interface{}) { W.WWarn(args) }
func (W _github_com_influxdata_telegraf_Logger) Warnf(format string, args []interface{}) {
	W.WWarnf(format, args)
}

// _github_com_influxdata_telegraf_Metric is an interface wrapper for Metric type
type _github_com_influxdata_telegraf_Metric struct {
	WAccept       func()
	WAddField     func(key string, value interface{})
	WAddPrefix    func(prefix string)
	WAddSuffix    func(suffix string)
	WAddTag       func(key string, value string)
	WCopy         func() telegraf.Metric
	WDrop         func()
	WFieldList    func() []*telegraf.Field
	WFields       func() map[string]interface{}
	WGetField     func(key string) (interface{}, bool)
	WGetTag       func(key string) (string, bool)
	WHasField     func(key string) bool
	WHasTag       func(key string) bool
	WHashID       func() uint64
	WIsAggregate  func() bool
	WName         func() string
	WReject       func()
	WRemoveField  func(key string)
	WRemoveTag    func(key string)
	WSetAggregate func(a0 bool)
	WSetName      func(name string)
	WSetTime      func(t time.Time)
	WTagList      func() []*telegraf.Tag
	WTags         func() map[string]string
	WTime         func() time.Time
	WType         func() telegraf.ValueType
}

func (W _github_com_influxdata_telegraf_Metric) Accept() { W.WAccept() }
func (W _github_com_influxdata_telegraf_Metric) AddField(key string, value interface{}) {
	W.WAddField(key, value)
}
func (W _github_com_influxdata_telegraf_Metric) AddPrefix(prefix string) { W.WAddPrefix(prefix) }
func (W _github_com_influxdata_telegraf_Metric) AddSuffix(suffix string) { W.WAddSuffix(suffix) }
func (W _github_com_influxdata_telegraf_Metric) AddTag(key string, value string) {
	W.WAddTag(key, value)
}
func (W _github_com_influxdata_telegraf_Metric) Copy() telegraf.Metric          { return W.WCopy() }
func (W _github_com_influxdata_telegraf_Metric) Drop()                          { W.WDrop() }
func (W _github_com_influxdata_telegraf_Metric) FieldList() []*telegraf.Field   { return W.WFieldList() }
func (W _github_com_influxdata_telegraf_Metric) Fields() map[string]interface{} { return W.WFields() }
func (W _github_com_influxdata_telegraf_Metric) GetField(key string) (interface{}, bool) {
	return W.WGetField(key)
}
func (W _github_com_influxdata_telegraf_Metric) GetTag(key string) (string, bool) {
	return W.WGetTag(key)
}
func (W _github_com_influxdata_telegraf_Metric) HasField(key string) bool { return W.WHasField(key) }
func (W _github_com_influxdata_telegraf_Metric) HasTag(key string) bool   { return W.WHasTag(key) }
func (W _github_com_influxdata_telegraf_Metric) HashID() uint64           { return W.WHashID() }
func (W _github_com_influxdata_telegraf_Metric) IsAggregate() bool        { return W.WIsAggregate() }
func (W _github_com_influxdata_telegraf_Metric) Name() string             { return W.WName() }
func (W _github_com_influxdata_telegraf_Metric) Reject()                  { W.WReject() }
func (W _github_com_influxdata_telegraf_Metric) RemoveField(key string)   { W.WRemoveField(key) }
func (W _github_com_influxdata_telegraf_Metric) RemoveTag(key string)     { W.WRemoveTag(key) }
func (W _github_com_influxdata_telegraf_Metric) SetAggregate(a0 bool)     { W.WSetAggregate(a0) }
func (W _github_com_influxdata_telegraf_Metric) SetName(name string)      { W.WSetName(name) }
func (W _github_com_influxdata_telegraf_Metric) SetTime(t time.Time)      { W.WSetTime(t) }
func (W _github_com_influxdata_telegraf_Metric) TagList() []*telegraf.Tag { return W.WTagList() }
func (W _github_com_influxdata_telegraf_Metric) Tags() map[string]string  { return W.WTags() }
func (W _github_com_influxdata_telegraf_Metric) Time() time.Time          { return W.WTime() }
func (W _github_com_influxdata_telegraf_Metric) Type() telegraf.ValueType { return W.WType() }

// _github_com_influxdata_telegraf_Output is an interface wrapper for Output type
type _github_com_influxdata_telegraf_Output struct {
	WClose        func() error
	WConnect      func() error
	WDescription  func() string
	WSampleConfig func() string
	WWrite        func(metrics []telegraf.Metric) error
}

func (W _github_com_influxdata_telegraf_Output) Close() error         { return W.WClose() }
func (W _github_com_influxdata_telegraf_Output) Connect() error       { return W.WConnect() }
func (W _github_com_influxdata_telegraf_Output) Description() string  { return W.WDescription() }
func (W _github_com_influxdata_telegraf_Output) SampleConfig() string { return W.WSampleConfig() }
func (W _github_com_influxdata_telegraf_Output) Write(metrics []telegraf.Metric) error {
	return W.WWrite(metrics)
}

// _github_com_influxdata_telegraf_Processor is an interface wrapper for Processor type
type _github_com_influxdata_telegraf_Processor struct {
	WApply        func(in []telegraf.Metric) []telegraf.Metric
	WDescription  func() string
	WSampleConfig func() string
}

func (W _github_com_influxdata_telegraf_Processor) Apply(in []telegraf.Metric) []telegraf.Metric {
	return W.WApply(in)
}
func (W _github_com_influxdata_telegraf_Processor) Description() string  { return W.WDescription() }
func (W _github_com_influxdata_telegraf_Processor) SampleConfig() string { return W.WSampleConfig() }

// _github_com_influxdata_telegraf_ServiceInput is an interface wrapper for ServiceInput type
type _github_com_influxdata_telegraf_ServiceInput struct {
	WDescription  func() string
	WGather       func(a0 telegraf.Accumulator) error
	WSampleConfig func() string
	WStart        func(a0 telegraf.Accumulator) error
	WStop         func()
}

func (W _github_com_influxdata_telegraf_ServiceInput) Description() string { return W.WDescription() }
func (W _github_com_influxdata_telegraf_ServiceInput) Gather(a0 telegraf.Accumulator) error {
	return W.WGather(a0)
}
func (W _github_com_influxdata_telegraf_ServiceInput) SampleConfig() string {
	return W.WSampleConfig()
}
func (W _github_com_influxdata_telegraf_ServiceInput) Start(a0 telegraf.Accumulator) error {
	return W.WStart(a0)
}
func (W _github_com_influxdata_telegraf_ServiceInput) Stop() { W.WStop() }

// _github_com_influxdata_telegraf_TrackingAccumulator is an interface wrapper for TrackingAccumulator type
type _github_com_influxdata_telegraf_TrackingAccumulator struct {
	WAddCounter             func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddError               func(err error)
	WAddFields              func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddGauge               func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddHistogram           func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddMetric              func(a0 telegraf.Metric)
	WAddSummary             func(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time)
	WAddTrackingMetric      func(m telegraf.Metric) telegraf.TrackingID
	WAddTrackingMetricGroup func(group []telegraf.Metric) telegraf.TrackingID
	WDelivered              func() <-chan telegraf.DeliveryInfo
	WSetPrecision           func(precision time.Duration)
	WWithTracking           func(maxTracked int) telegraf.TrackingAccumulator
}

func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddCounter(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddCounter(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddError(err error) { W.WAddError(err) }
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddFields(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddFields(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddGauge(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddGauge(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddHistogram(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddHistogram(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddMetric(a0 telegraf.Metric) {
	W.WAddMetric(a0)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddSummary(measurement string, fields map[string]interface{}, tags map[string]string, t []time.Time) {
	W.WAddSummary(measurement, fields, tags, t)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddTrackingMetric(m telegraf.Metric) telegraf.TrackingID {
	return W.WAddTrackingMetric(m)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) AddTrackingMetricGroup(group []telegraf.Metric) telegraf.TrackingID {
	return W.WAddTrackingMetricGroup(group)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) Delivered() <-chan telegraf.DeliveryInfo {
	return W.WDelivered()
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) SetPrecision(precision time.Duration) {
	W.WSetPrecision(precision)
}
func (W _github_com_influxdata_telegraf_TrackingAccumulator) WithTracking(maxTracked int) telegraf.TrackingAccumulator {
	return W.WWithTracking(maxTracked)
}
